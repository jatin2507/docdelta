# ScribeVerse Configuration Example
# Copy this file to .scribeverse.yml and customize for your project

# Source directory to scan for code files
sourceDir: ./src

# Output directory for generated documentation
outputDir: ./docs

# File patterns to include (auto-detected if not specified)
# ScribeVerse will automatically detect common file types in your project
include:
  - "**/*.{ts,tsx,js,jsx,mjs,cjs}"  # TypeScript & JavaScript
  - "**/*.{py,pyi}"                  # Python
  - "**/*.{go,mod,sum}"             # Go
  - "**/*.{rs,toml}"                # Rust
  - "**/*.{java,kt,scala}"          # JVM Languages
  - "**/*.{cpp,hpp,c,h,cc,cxx}"     # C/C++
  - "**/*.{cs,fs,vb}"               # .NET Languages
  - "**/*.{php,rb,swift,dart}"      # Other Languages
  - "**/*.{sql,nosql,cypher}"       # Database
  - "**/*.{yaml,yml,json,toml,xml}" # Config Files

# File patterns to exclude
exclude:
  - "**/node_modules/**"
  - "**/dist/**"
  - "**/build/**"
  - "**/target/**"
  - "**/.git/**"
  - "**/vendor/**"
  - "**/__pycache__/**"
  - "**/coverage/**"
  - "**/.next/**"
  - "**/out/**"

# Languages to process (auto-detected if not specified)
# ScribeVerse will automatically detect languages in your codebase
languages: auto  # or specify: [typescript, javascript, python, go, rust, java, cpp, sql]

# AI Configuration - Choose your preferred provider
ai:
  # Provider: openai, anthropic, google-gemini, github-copilot, xai-grok, ollama, litellm
  provider: openai

  # API Key (use environment variables for security)
  apiKey: ${OPENAI_API_KEY}

  # ============= OPENAI MODELS =============
  # GPT-4 Models (Best Quality)
  # model: gpt-4o                    # Latest GPT-4 Omni
  # model: gpt-4o-mini               # Fast GPT-4 Omni
  # model: gpt-4-turbo               # GPT-4 Turbo
  # model: gpt-4-turbo-preview       # Preview version
  # model: gpt-4                     # Standard GPT-4
  # GPT-3.5 Models (Cost Effective)
  # model: gpt-3.5-turbo             # Latest GPT-3.5
  # model: gpt-3.5-turbo-16k         # Extended context

  # ============= ANTHROPIC MODELS =============
  # provider: anthropic
  # apiKey: ${ANTHROPIC_API_KEY}
  # Claude 3 Models (Excellent for Code)
  # model: claude-3-5-sonnet-20241022 # Latest Claude 3.5
  # model: claude-3-opus-20240229      # Most capable
  # model: claude-3-sonnet-20240229    # Balanced
  # model: claude-3-haiku-20240307     # Fastest

  # ============= GOOGLE GEMINI MODELS =============
  # provider: google-gemini
  # apiKey: ${GOOGLE_AI_API_KEY}
  # projectId: ${GOOGLE_PROJECT_ID}
  # Gemini Models (Multimodal)
  # model: gemini-2.0-flash-exp       # Latest experimental
  # model: gemini-1.5-pro             # Production ready
  # model: gemini-1.5-flash           # Fast inference

  # ============= GITHUB COPILOT =============
  # provider: github-copilot
  # githubToken: ${GITHUB_TOKEN}
  # model: gpt-4                      # GitHub's GPT-4
  # copilotAccessMethod: auto         # auto, cli, api

  # ============= XAI GROK MODELS =============
  # provider: grok
  # apiKey: ${XAI_API_KEY}
  # model: grok-3-beta                # Latest Grok
  # model: grok-2                     # Stable version
  # enableSearch: true                # Real-time web search
  # reasoningEffort: medium           # low, medium, high

  # ============= OLLAMA (LOCAL) =============
  # provider: ollama
  # baseURL: http://localhost:11434
  # model: llama3.2                   # Local Llama
  # model: codellama                  # Code-specialized
  # model: mistral                    # Mistral model
  # model: qwen2.5-coder              # Coding specialist

  # ============= LITELLM (UNIFIED) =============
  # provider: litellm
  # baseURL: http://localhost:4000
  # model: openai/gpt-4o-mini         # Any LiteLLM model
  # apiKey: optional                  # If required

  # Default model selection (recommended)
  model: gpt-4o-mini

  # Advanced AI Settings
  maxTokens: 4000
  temperature: 0.2        # Lower for more consistent docs
  topP: 0.9              # Nucleus sampling
  frequencyPenalty: 0.0  # Reduce repetition
  presencePenalty: 0.0   # Encourage new topics

# Smart Git Integration
git:
  enabled: true
  autoPush: false
  remote: origin

  # Smart branch detection - uses current active branch instead of fixed branch
  branch: auto           # 'auto' to use current branch, or specify branch name

  # Smart commit prefix - auto-generated based on changes
  commitPrefix: auto     # 'auto' for smart detection, or specify like "docs:", "feat:", etc.

  # Auto-detect change types for commit messages
  autoDetectChangeType: true

  # Custom commit message templates
  commitTemplates:
    docs: "docs: update documentation"
    feat: "feat: add new feature documentation"
    fix: "fix: correct documentation errors"
    refactor: "refactor: restructure documentation"
    style: "style: improve documentation formatting"
    test: "test: add documentation examples"
    chore: "chore: update documentation tooling"

# Smart Language Detection
detection:
  # Auto-detect programming languages in project
  autoDetectLanguages: true

  # Auto-detect project type (web, mobile, desktop, cli, library)
  autoDetectProjectType: true

  # Auto-configure based on package.json, requirements.txt, go.mod, etc.
  autoConfigureFromManifest: true

  # Minimum file count to include a language
  minFilesPerLanguage: 2

# Metadata and Caching
metadata:
  dir: .scribeverse
  cacheDir: .scribeverse-cache
  enableCache: true

  # Smart cache invalidation
  smartCaching: true

  # Cache duration (hours)
  cacheDuration: 24

# Smart Documentation Generation
generation:
  # Auto-generate based on project structure
  autoGenerateStructure: true

  # Generate architecture diagrams
  generateDiagrams: true

  # Include code examples
  includeExamples: true

  # Generate API documentation
  generateAPI: true

  # Generate usage guides
  generateUsageGuides: true

  # Smart content organization
  smartOrganization: true

  # Dependency analysis depth
  dependencyDepth: 3

  # Generate table of contents
  generateTOC: true

# Output Configuration
output:
  format: markdown       # markdown, html, json, all
  htmlTheme: modern     # default, modern, minimal, dark
  includeMetadata: true

  # Smart formatting based on content
  smartFormatting: true

  # Generate multiple formats
  multiFormat: false

# Performance & Advanced Options
advanced:
  # Parallel processing
  parallelism: 4

  # Chunk processing
  chunkSize: 150

  # Timeouts
  aiTimeout: 60000       # 60 seconds
  gitTimeout: 30000      # 30 seconds

  # Retry configuration
  retryOnFailure: true
  maxRetries: 3
  retryDelay: 1000       # ms

  # Memory optimization
  optimizeMemory: true

  # Progress reporting
  showProgress: true
  verboseLogging: false

# Hook Configuration (Advanced)
hooks:
  # Run before documentation generation
  preGenerate: []

  # Run after documentation generation
  postGenerate: []

  # Run before commit
  preCommit: []

  # Run after commit
  postCommit: []

# Environment-Specific Overrides
environments:
  development:
    ai:
      model: gpt-4o-mini  # Faster model for dev
    advanced:
      verboseLogging: true

  production:
    ai:
      model: gpt-4o       # Best model for production
    git:
      autoPush: true

  ci:
    ai:
      model: gpt-3.5-turbo  # Cost-effective for CI
    advanced:
      parallelism: 8